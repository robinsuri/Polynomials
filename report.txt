1) Have used Simple linked List built from scratch
2) The polynomial display function works exactly the way mentioned in the pdf
eg : - 10x^15 + -3.2x^8 + x + 7.5
3) The method evaluate is implemented recursively
4) On Running polynomialDriver.java the results are identical to the Project2Result.txt file
5) All the test cases are passed
6) On running the PolynomialDriver.java the output in the console is there in the ProgramExecutionResults.txt


Obstacles Encountered -
1) Need to add lot of functions in the CustomLinkedList.java class one by one when any error was encountered.
It has the functions isEmpty(), append(), getSize() which i didnt put initially. And that resulted in complex code.
Once i seperated them out in the CustomLinkedList class things became much easier.

2) Realized that i needed to create a new node everytime i am adding it to a new linked list like in add function.
Initially i was putting the old node which caused conflicts. As the add will produce a new linked list so its
 realistical to think that one should put the new node everytime.


Learning from this Project -

1) Importance of putting functions at one place inside the customlinkedList class
2) How the java linked list is actually written underneath
3) Working with linked list
4) Thinking through how to multiply two polynomials using the add function written before rather than going from scratch.
It was a good algorithm that i designed
5) Using recursion
6) Good coding practices like separating code out into respective classes and having
custom functions provide a lot of help and clear code.


